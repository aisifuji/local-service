/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.herocheer.zhsq.localservice.core.device.box.YTBox.pojo;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SimilarFace extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6992656617124429696L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimilarFace\",\"namespace\":\"com.herocheer.zhsq.localservice.core.device.box.YTBox.pojo\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"face_id in the repository\"},{\"name\":\"similarity\",\"type\":\"double\",\"doc\":\"0 - 100\"},{\"name\":\"extra_meta\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"json format\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** face_id in the repository */
  @Deprecated public String id;
  /** 0 - 100 */
  @Deprecated public double similarity;
  /** json format */
  @Deprecated public String extra_meta;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimilarFace() {}

  /**
   * All-args constructor.
   * @param id face_id in the repository
   * @param similarity 0 - 100
   * @param extra_meta json format
   */
  public SimilarFace(String id, Double similarity, String extra_meta) {
    this.id = id;
    this.similarity = similarity;
    this.extra_meta = extra_meta;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return similarity;
    case 2: return extra_meta;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (String)value$; break;
    case 1: similarity = (Double)value$; break;
    case 2: extra_meta = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return face_id in the repository
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * face_id in the repository
   * @param value the value to set.
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'similarity' field.
   * @return 0 - 100
   */
  public Double getSimilarity() {
    return similarity;
  }

  /**
   * Sets the value of the 'similarity' field.
   * 0 - 100
   * @param value the value to set.
   */
  public void setSimilarity(Double value) {
    this.similarity = value;
  }

  /**
   * Gets the value of the 'extra_meta' field.
   * @return json format
   */
  public String getExtraMeta() {
    return extra_meta;
  }

  /**
   * Sets the value of the 'extra_meta' field.
   * json format
   * @param value the value to set.
   */
  public void setExtraMeta(String value) {
    this.extra_meta = value;
  }

  /**
   * Creates a new SimilarFace RecordBuilder.
   * @return A new SimilarFace RecordBuilder
   */
  public static SimilarFace.Builder newBuilder() {
    return new SimilarFace.Builder();
  }

  /**
   * Creates a new SimilarFace RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimilarFace RecordBuilder
   */
  public static SimilarFace.Builder newBuilder(SimilarFace.Builder other) {
    return new SimilarFace.Builder(other);
  }

  /**
   * Creates a new SimilarFace RecordBuilder by copying an existing SimilarFace instance.
   * @param other The existing instance to copy.
   * @return A new SimilarFace RecordBuilder
   */
  public static SimilarFace.Builder newBuilder(SimilarFace other) {
    return new SimilarFace.Builder(other);
  }

  /**
   * RecordBuilder for SimilarFace instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimilarFace>
    implements org.apache.avro.data.RecordBuilder<SimilarFace> {

    /** face_id in the repository */
    private String id;
    /** 0 - 100 */
    private double similarity;
    /** json format */
    private String extra_meta;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SimilarFace.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.similarity)) {
        this.similarity = data().deepCopy(fields()[1].schema(), other.similarity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.extra_meta)) {
        this.extra_meta = data().deepCopy(fields()[2].schema(), other.extra_meta);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimilarFace instance
     * @param other The existing instance to copy.
     */
    private Builder(SimilarFace other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.similarity)) {
        this.similarity = data().deepCopy(fields()[1].schema(), other.similarity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.extra_meta)) {
        this.extra_meta = data().deepCopy(fields()[2].schema(), other.extra_meta);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * face_id in the repository
      * @return The value.
      */
    public String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * face_id in the repository
      * @param value The value of 'id'.
      * @return This builder.
      */
    public SimilarFace.Builder setId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * face_id in the repository
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * face_id in the repository
      * @return This builder.
      */
    public SimilarFace.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'similarity' field.
      * 0 - 100
      * @return The value.
      */
    public Double getSimilarity() {
      return similarity;
    }

    /**
      * Sets the value of the 'similarity' field.
      * 0 - 100
      * @param value The value of 'similarity'.
      * @return This builder.
      */
    public SimilarFace.Builder setSimilarity(double value) {
      validate(fields()[1], value);
      this.similarity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'similarity' field has been set.
      * 0 - 100
      * @return True if the 'similarity' field has been set, false otherwise.
      */
    public boolean hasSimilarity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'similarity' field.
      * 0 - 100
      * @return This builder.
      */
    public SimilarFace.Builder clearSimilarity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_meta' field.
      * json format
      * @return The value.
      */
    public String getExtraMeta() {
      return extra_meta;
    }

    /**
      * Sets the value of the 'extra_meta' field.
      * json format
      * @param value The value of 'extra_meta'.
      * @return This builder.
      */
    public SimilarFace.Builder setExtraMeta(String value) {
      validate(fields()[2], value);
      this.extra_meta = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_meta' field has been set.
      * json format
      * @return True if the 'extra_meta' field has been set, false otherwise.
      */
    public boolean hasExtraMeta() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'extra_meta' field.
      * json format
      * @return This builder.
      */
    public SimilarFace.Builder clearExtraMeta() {
      extra_meta = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SimilarFace build() {
      try {
        SimilarFace record = new SimilarFace();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        record.similarity = fieldSetFlags()[1] ? this.similarity : (Double) defaultValue(fields()[1]);
        record.extra_meta = fieldSetFlags()[2] ? this.extra_meta : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
