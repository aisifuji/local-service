/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.herocheer.zhsq.localservice.core.device.box.YTBox.pojo;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Face extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4883116004726785211L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Face\",\"namespace\":\"com.herocheer.zhsq.localservice.core.device.box.YTBox.pojo\",\"fields\":[{\"name\":\"face_image\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Image\",\"fields\":[{\"name\":\"content\",\"type\":\"bytes\"},{\"name\":\"content_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"valid mime-type\"}]}]},{\"name\":\"face_feature\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"scene_image\",\"type\":[\"null\",\"Image\"]},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The time point when this image was snapshotted\"},{\"name\":\"extra_meta\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"json format\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Image face_image;
  @Deprecated public java.nio.ByteBuffer face_feature;
  @Deprecated public Image scene_image;
  /** The time point when this image was snapshotted */
  @Deprecated public String timestamp;
  /** json format */
  @Deprecated public String extra_meta;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Face() {}

  /**
   * All-args constructor.
   * @param face_image The new value for face_image
   * @param face_feature The new value for face_feature
   * @param scene_image The new value for scene_image
   * @param timestamp The time point when this image was snapshotted
   * @param extra_meta json format
   */
  public Face(Image face_image, java.nio.ByteBuffer face_feature, Image scene_image, String timestamp, String extra_meta) {
    this.face_image = face_image;
    this.face_feature = face_feature;
    this.scene_image = scene_image;
    this.timestamp = timestamp;
    this.extra_meta = extra_meta;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return face_image;
    case 1: return face_feature;
    case 2: return scene_image;
    case 3: return timestamp;
    case 4: return extra_meta;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: face_image = (Image)value$; break;
    case 1: face_feature = (java.nio.ByteBuffer)value$; break;
    case 2: scene_image = (Image)value$; break;
    case 3: timestamp = (String)value$; break;
    case 4: extra_meta = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'face_image' field.
   * @return The value of the 'face_image' field.
   */
  public Image getFaceImage() {
    return face_image;
  }

  /**
   * Sets the value of the 'face_image' field.
   * @param value the value to set.
   */
  public void setFaceImage(Image value) {
    this.face_image = value;
  }

  /**
   * Gets the value of the 'face_feature' field.
   * @return The value of the 'face_feature' field.
   */
  public java.nio.ByteBuffer getFaceFeature() {
    return face_feature;
  }

  /**
   * Sets the value of the 'face_feature' field.
   * @param value the value to set.
   */
  public void setFaceFeature(java.nio.ByteBuffer value) {
    this.face_feature = value;
  }

  /**
   * Gets the value of the 'scene_image' field.
   * @return The value of the 'scene_image' field.
   */
  public Image getSceneImage() {
    return scene_image;
  }

  /**
   * Sets the value of the 'scene_image' field.
   * @param value the value to set.
   */
  public void setSceneImage(Image value) {
    this.scene_image = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The time point when this image was snapshotted
   */
  public String getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * The time point when this image was snapshotted
   * @param value the value to set.
   */
  public void setTimestamp(String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'extra_meta' field.
   * @return json format
   */
  public String getExtraMeta() {
    return extra_meta;
  }

  /**
   * Sets the value of the 'extra_meta' field.
   * json format
   * @param value the value to set.
   */
  public void setExtraMeta(String value) {
    this.extra_meta = value;
  }

  /**
   * Creates a new Face RecordBuilder.
   * @return A new Face RecordBuilder
   */
  public static Face.Builder newBuilder() {
    return new Face.Builder();
  }

  /**
   * Creates a new Face RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Face RecordBuilder
   */
  public static Face.Builder newBuilder(Face.Builder other) {
    return new Face.Builder(other);
  }

  /**
   * Creates a new Face RecordBuilder by copying an existing Face instance.
   * @param other The existing instance to copy.
   * @return A new Face RecordBuilder
   */
  public static Face.Builder newBuilder(Face other) {
    return new Face.Builder(other);
  }

  /**
   * RecordBuilder for Face instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Face>
    implements org.apache.avro.data.RecordBuilder<Face> {

    private Image face_image;
    private Image.Builder face_imageBuilder;
    private java.nio.ByteBuffer face_feature;
    private Image scene_image;
    private Image.Builder scene_imageBuilder;
    /** The time point when this image was snapshotted */
    private String timestamp;
    /** json format */
    private String extra_meta;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Face.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.face_image)) {
        this.face_image = data().deepCopy(fields()[0].schema(), other.face_image);
        fieldSetFlags()[0] = true;
      }
      if (other.hasFaceImageBuilder()) {
        this.face_imageBuilder = Image.newBuilder(other.getFaceImageBuilder());
      }
      if (isValidValue(fields()[1], other.face_feature)) {
        this.face_feature = data().deepCopy(fields()[1].schema(), other.face_feature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scene_image)) {
        this.scene_image = data().deepCopy(fields()[2].schema(), other.scene_image);
        fieldSetFlags()[2] = true;
      }
      if (other.hasSceneImageBuilder()) {
        this.scene_imageBuilder = Image.newBuilder(other.getSceneImageBuilder());
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.extra_meta)) {
        this.extra_meta = data().deepCopy(fields()[4].schema(), other.extra_meta);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Face instance
     * @param other The existing instance to copy.
     */
    private Builder(Face other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.face_image)) {
        this.face_image = data().deepCopy(fields()[0].schema(), other.face_image);
        fieldSetFlags()[0] = true;
      }
      this.face_imageBuilder = null;
      if (isValidValue(fields()[1], other.face_feature)) {
        this.face_feature = data().deepCopy(fields()[1].schema(), other.face_feature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scene_image)) {
        this.scene_image = data().deepCopy(fields()[2].schema(), other.scene_image);
        fieldSetFlags()[2] = true;
      }
      this.scene_imageBuilder = null;
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.extra_meta)) {
        this.extra_meta = data().deepCopy(fields()[4].schema(), other.extra_meta);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'face_image' field.
      * @return The value.
      */
    public Image getFaceImage() {
      return face_image;
    }

    /**
      * Sets the value of the 'face_image' field.
      * @param value The value of 'face_image'.
      * @return This builder.
      */
    public Face.Builder setFaceImage(Image value) {
      validate(fields()[0], value);
      this.face_imageBuilder = null;
      this.face_image = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'face_image' field has been set.
      * @return True if the 'face_image' field has been set, false otherwise.
      */
    public boolean hasFaceImage() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'face_image' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Image.Builder getFaceImageBuilder() {
      if (face_imageBuilder == null) {
        if (hasFaceImage()) {
          setFaceImageBuilder(Image.newBuilder(face_image));
        } else {
          setFaceImageBuilder(Image.newBuilder());
        }
      }
      return face_imageBuilder;
    }

    /**
     * Sets the Builder instance for the 'face_image' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Face.Builder setFaceImageBuilder(Image.Builder value) {
      clearFaceImage();
      face_imageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'face_image' field has an active Builder instance
     * @return True if the 'face_image' field has an active Builder instance
     */
    public boolean hasFaceImageBuilder() {
      return face_imageBuilder != null;
    }

    /**
      * Clears the value of the 'face_image' field.
      * @return This builder.
      */
    public Face.Builder clearFaceImage() {
      face_image = null;
      face_imageBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'face_feature' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFaceFeature() {
      return face_feature;
    }

    /**
      * Sets the value of the 'face_feature' field.
      * @param value The value of 'face_feature'.
      * @return This builder.
      */
    public Face.Builder setFaceFeature(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.face_feature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'face_feature' field has been set.
      * @return True if the 'face_feature' field has been set, false otherwise.
      */
    public boolean hasFaceFeature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'face_feature' field.
      * @return This builder.
      */
    public Face.Builder clearFaceFeature() {
      face_feature = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'scene_image' field.
      * @return The value.
      */
    public Image getSceneImage() {
      return scene_image;
    }

    /**
      * Sets the value of the 'scene_image' field.
      * @param value The value of 'scene_image'.
      * @return This builder.
      */
    public Face.Builder setSceneImage(Image value) {
      validate(fields()[2], value);
      this.scene_imageBuilder = null;
      this.scene_image = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'scene_image' field has been set.
      * @return True if the 'scene_image' field has been set, false otherwise.
      */
    public boolean hasSceneImage() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'scene_image' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Image.Builder getSceneImageBuilder() {
      if (scene_imageBuilder == null) {
        if (hasSceneImage()) {
          setSceneImageBuilder(Image.newBuilder(scene_image));
        } else {
          setSceneImageBuilder(Image.newBuilder());
        }
      }
      return scene_imageBuilder;
    }

    /**
     * Sets the Builder instance for the 'scene_image' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Face.Builder setSceneImageBuilder(Image.Builder value) {
      clearSceneImage();
      scene_imageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'scene_image' field has an active Builder instance
     * @return True if the 'scene_image' field has an active Builder instance
     */
    public boolean hasSceneImageBuilder() {
      return scene_imageBuilder != null;
    }

    /**
      * Clears the value of the 'scene_image' field.
      * @return This builder.
      */
    public Face.Builder clearSceneImage() {
      scene_image = null;
      scene_imageBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The time point when this image was snapshotted
      * @return The value.
      */
    public String getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The time point when this image was snapshotted
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Face.Builder setTimestamp(String value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The time point when this image was snapshotted
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The time point when this image was snapshotted
      * @return This builder.
      */
    public Face.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_meta' field.
      * json format
      * @return The value.
      */
    public String getExtraMeta() {
      return extra_meta;
    }

    /**
      * Sets the value of the 'extra_meta' field.
      * json format
      * @param value The value of 'extra_meta'.
      * @return This builder.
      */
    public Face.Builder setExtraMeta(String value) {
      validate(fields()[4], value);
      this.extra_meta = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_meta' field has been set.
      * json format
      * @return True if the 'extra_meta' field has been set, false otherwise.
      */
    public boolean hasExtraMeta() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'extra_meta' field.
      * json format
      * @return This builder.
      */
    public Face.Builder clearExtraMeta() {
      extra_meta = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Face build() {
      try {
        Face record = new Face();
        if (face_imageBuilder != null) {
          record.face_image = this.face_imageBuilder.build();
        } else {
          record.face_image = fieldSetFlags()[0] ? this.face_image : (Image) defaultValue(fields()[0]);
        }
        record.face_feature = fieldSetFlags()[1] ? this.face_feature : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        if (scene_imageBuilder != null) {
          record.scene_image = this.scene_imageBuilder.build();
        } else {
          record.scene_image = fieldSetFlags()[2] ? this.scene_image : (Image) defaultValue(fields()[2]);
        }
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (String) defaultValue(fields()[3]);
        record.extra_meta = fieldSetFlags()[4] ? this.extra_meta : (String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
